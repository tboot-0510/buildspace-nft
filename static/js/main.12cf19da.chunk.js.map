{"version":3,"sources":["assets/twitter-logo.svg","assets/opensea.png","App.js","index.js"],"names":["CONTRACT_ADDRESS","TWITTER_HANDLE","TWITTER_LINK","App","useState","currentAddress","setCurrentAddress","isLoading","setLoading","currentLink","setCurrentLink","setCountMinted","minted","setMinted","useWindowSize","width","height","currentOpenSeaLink","setCurrentOpenSeaLink","override","css","checkWallet","a","window","ethereum","console","log","request","method","accounts","length","account","setupEventListener","chainId","alert","connectWallet","provider","ethers","providers","Web3Provider","signer","getSigner","Contract","myEpicNft","abi","on","from","tokenId","toNumber","error","askContractToMintNFT","connectedContract","makeAnEpicNFT","nftTxn","wait","hash","lof","askContractForMintCount","getTotalMintedNFT","countValue","useEffect","count","className","onClick","disabled","color","loading","size","open","alt","src","twitterLogo","href","target","rel","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.12cf19da.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/twitter-logo.a8a75254.svg\";","export default __webpack_public_path__ + \"static/media/opensea.5b5dcb52.png\";","import './styles/App.css';\nimport twitterLogo from './assets/twitter-logo.svg';\nimport openseaLogo from \"./assets/opensea.png\";\nimport { css } from \"@emotion/react\";\nimport {ethers} from 'ethers';\nimport React, {useEffect, useState} from \"react\";\nimport { ENGINE_METHOD_CIPHERS } from 'constants';\nimport myEpicNft from './utils/MyEpicNFT.json';\nimport useWindowSize from 'react-use/lib/useWindowSize';\nimport Confetti from 'react-confetti';\nimport BarLoader from \"react-spinners/BarLoader\";\n\nconst CONTRACT_ADDRESS = \"0x139ac92c08Ac164b47D56F94e19b5F114012264b\";\n// Constants\nconst TWITTER_HANDLE = '_buildspace';\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\nconst OPENSEA_LINK = \"https://testnets.opensea.io/assets/squarenft-nk1xlvfo6u\";\nconst TOTAL_MINT_COUNT = 50;\n\n\n\nconst App = () => {\n\n  const [currentAddress, setCurrentAddress] = useState(\"\");\n  const [isLoading, setLoading] = useState(false);\n  const [currentLink, setCurrentLink] = useState(\"\");\n  const [countMinted, setCountMinted] = useState(0);\n  const [minted, setMinted] = useState(false);\n  const { width, height } = useWindowSize();\n  const [currentOpenSeaLink, setCurrentOpenSeaLink] = useState(\"\");\n  const override = css`\n    display: block;\n    margin-top: 50px;\n    margin-left: auto;\n    margin-right: auto;\n    border-color: red;\n  `;\n\n  \n\n  const checkWallet = async () => {\n    const {ethereum} = window;\n\n    if (!ethereum){\n      console.log('Need to have metamask');\n      return;\n    }else{\n      console.log('We have ethereum object', ethereum);\n    }\n\n    // Check if we're authorized to access the user's wallet\n    const accounts = await ethereum.request({method:'eth_accounts'});\n\n    if (accounts.length !== 0){\n      const account = accounts[0];\n      console.log(\"Found an authorized account:\", account);\n      setupEventListener();\n      setCurrentAddress(account);\n      // Setup listener! This is for the case where a user comes to our site\n      // and ALREADY had their wallet connected + authorized.\n    } else {\n      console.log(\"No authorized account found\")\n    }\n    let chainId = await ethereum.request({ method: 'eth_chainId' });\n    console.log(\"Connected to chain \" + chainId);\n\n    // String, hex code of the chainId of the Rinkebey test network\n    const rinkebyChainId = \"0x4\"; \n    if (chainId !== rinkebyChainId) {\n      alert(\"You are not connected to the Rinkeby Test Network!\");\n    }\n  }\n\n  const connectWallet = async () => {\n    try {\n      const {ethereum} = window;\n      if (!ethereum){\n        alert(\"Get MetaMask\");\n        return;\n      }\n\n      const accounts = await ethereum.request({method:\"eth_requestAccounts\"});\n      console.log(\"Connected\", accounts[0]);\n      setCurrentAddress(accounts[0]);\n      // Setup listener! This is for the case where a user comes to our site\n      // and ALREADY had their wallet connected + authorized.\n      setupEventListener()\n    } catch (error){\n      console.log(error)\n    }\n  }\n\n  // Setup our listener.\n  const setupEventListener = async () => {\n    // Most of this looks the same as our function askContractToMintNft\n    try {\n      const { ethereum } = window;\n\n      if (ethereum) {\n        // Same stuff again\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const connectedContract = new ethers.Contract(CONTRACT_ADDRESS, myEpicNft.abi, signer);\n\n        // THIS IS THE MAGIC SAUCE.\n        // This will essentially \"capture\" our event when our contract throws it.\n        // If you're familiar with webhooks, it's very similar to that!\n        connectedContract.on(\"NewEpicNFTMinted\", (from, tokenId) => {\n          // alert(`Hey there! We've minted your NFT and sent it to your wallet. \n          // It may be blank right now. It can take a max of 10 min to show up on OpenSea. \n          // Here's the link: https://testnets.opensea.io/assets/${CONTRACT_ADDRESS}/${tokenId.toNumber()}`)\n          setCurrentOpenSeaLink(`https://testnets.opensea.io/assets/${CONTRACT_ADDRESS}/${tokenId.toNumber()}`)\n        });\n\n        console.log(\"Setup event listener!\")\n\n      } else {\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n  const askContractToMintNFT = async () => {\n    \n    try {\n      const {ethereum} = window;\n\n      if (ethereum){\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const connectedContract = new ethers.Contract(CONTRACT_ADDRESS, myEpicNft.abi, signer);\n\n        console.log(\"Going to pop wallet now to pay gas..\")\n        let nftTxn = await connectedContract.makeAnEpicNFT();\n        console.log(\"Mining... please wait\")\n        await nftTxn.wait();\n        console.log(`Mined, see transaction : https://rinkeby.etherscan.io/tx/${nftTxn.hash}`);\n        setLoading(false);\n        setCurrentLink(`https://rinkeby.etherscan.io/tx/${nftTxn.hash}`);\n        setMinted(true);\n      } else {\n        console.lof(\"Ethereum objecy doesn't exist\");\n      }\n    } catch (error){\n      console.log(error)\n    }\n  }\n\n  const askContractForMintCount = async () => {\n    try {\n      const {ethereum} = window;\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const connectedContract = new ethers.Contract(CONTRACT_ADDRESS,myEpicNft.abi, signer);\n\n        let countValue = await connectedContract.getTotalMintedNFT();\n        return countValue.toNumber();\n      } else {\n        console.log(\"Ethereum object doesn't exist\")\n      }\n    } catch(error){\n      console.log(error);\n    }\n  }\n\n  useEffect(async () => {\n    const count = await askContractForMintCount();\n    checkWallet();\n    setCountMinted(count);\n  }, [])\n\n  // Render Methods\n  const renderNotConnectedContainer = () => (\n    <button className=\"cta-button connect-wallet-button\">\n      Connect to Wallet\n    </button>\n  );\n\n  const renderMinting = () => {\n    setLoading(true);\n    setMinted(false);\n    askContractToMintNFT();\n  }\n\n  \n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <div className=\"header-container\">\n          <p className=\"header gradient-text\">My NFT Collection</p>\n          <p className=\"sub-text\">\n            Each unique. Each beautiful. Discover your NFT today.\n          </p>\n          {currentAddress === \"\" ? (\n            <button onClick={connectWallet} className=\"cta-button connect-wallet-button\">\n              Connect to wallet\n            </button>\n          ) : (\n            <><button disabled={isLoading} onClick={renderMinting} className=\"cta-button connect-wallet-button\">\n                {isLoading ? 'Minting...' : 'Mint NFTs'}\n              </button>\n              <br />\n              <BarLoader color={\"#36D7B7\"} loading={isLoading} css={override} size={200} /></>\n          )}\n        </div>\n        {minted ? (\n          <div className=\"link-container\">\n            <Confetti\n              width={width}\n              height={height}\n            />\n            <button\n              onClick={() => {\n                window.open(currentLink, \"_blank\");\n              }}\n              className=\"cta-button connect-wallet-button\"\n            >🔗 See on Etherscan</button>\n            <br />\n            <br />\n            <button\n              onClick={() => {\n                window.open(currentOpenSeaLink, \"_blank\");\n              }}\n              className=\"cta-button connect-wallet-button\"\n            >🌊 See OpenSea Collection</button>\n          </div>\n        ) : (\n          \"\"\n        )}\n        <div className=\"footer-container\">\n          <img alt=\"Twitter Logo\" className=\"twitter-logo\" src={twitterLogo} />\n          <a\n            className=\"footer-text\"\n            href={TWITTER_LINK}\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >{`built on @${TWITTER_HANDLE}`}</a>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}